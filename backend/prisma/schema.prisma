datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Album {
  id          Int      @id @default(autoincrement())
  title       String
  releaseDate DateTime
  artworkUrl  String
  songs       Song[]
}

model Song {
  id          Int      @id @default(autoincrement())
  title       String
  trackNumber Int
  albumId     Int
  duration    String
  album       Album    @relation(fields: [albumId], references: [id])
  reviews     Review[]
}

model User {
  id       Int         @id @default(autoincrement())
  username String      @unique
  email    String      @unique
  password String
  image    String?
  groups   UserGroup[]
  reviews  Review[]
}

model Group {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  image       String?
  isPrivate   Boolean     @default(false)
  inviteCode  String?     @unique
  members     UserGroup[]
  createdAt   DateTime    @default(now())
  reviews     Review[]
}

model UserGroup {
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  group    Group    @relation(fields: [groupId], references: [id])
  groupId  Int
  role     String   @default("member") // 'admin' or 'member'
  joinedAt DateTime @default(now())

  @@id([userId, groupId])
  @@index([groupId])
}

model Review {
  id        Int      @id @default(autoincrement())
  content   String
  rating    Float
  song      Song     @relation(fields: [songId], references: [id])
  songId    Int
  author    User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  group     Group?   @relation(fields: [groupId], references: [id])
  groupId   Int?
}
